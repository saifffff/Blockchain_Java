In Java security, MessageDigest is a class that provides functionality for working with message digest algorithms, also known as hashing algorithms. These algorithms are one-way functions that take input data of any size and generate a fixed-length output value, called a message digest or hash value.

Here's a breakdown of how MessageDigest works:

1. Creating a MessageDigest Object:

You use the getInstance() method of the MessageDigest class to specify the desired hashing algorithm. Common algorithms include SHA-1, SHA-256, and MD5. This method returns a MessageDigest object for the chosen algorithm.

2. Feeding Data to the Digest:

The update() method is used to feed data (messages) into the MessageDigest object. This can be done in parts by calling update() multiple times with chunks of data.

3. Generating the Message Digest:

Once you've provided all the data, call the digest() method. This finalizes the hashing process and returns the message digest as a byte array.





String hex = Integer.toHexString(0xff & hash[i]);: This line converts a byte from the hash array into a hexadecimal string. The & operator is used to perform a bitwise AND operation on the byte and the value 0xff. This operation sets all but the lower 8 bits of the byte to zero. The Integer.toHexString() method is then used to convert the resulting byte value into a hexadecimal string.






1. Extracting the Lower 8 Bits:

The hash array stores the message digest (hash) calculated using SHA-256. Each element in this array is a byte, representing 8 bits of data.
The value 0xff (in hexadecimal notation) is also a byte, but all its bits are set to 1 (11111111 in binary).
The & operator performs a bitwise AND operation on each corresponding bit of the byte from the hash array and 0xff.
In a bitwise AND operation, a bit in the result is 1 only if the corresponding bits in both operands are 1.
Since all bits in 0xff are 1, the result will only retain the values in the lower 8 bits of the byte from the hash array. Effectively, this operation masks out any data beyond the lower 8 bits.
2. Converting to Hexadecimal String:

After the bitwise AND, we have a byte value representing only the lower 8 bits of the original hash byte.
The Integer.toHexString(value) method is used to convert this byte value (value) into a hexadecimal string representation.
Hexadecimal uses digits (0-9) and letters (A-F) to represent numbers. Each hexadecimal digit corresponds to 4 bits.
Why is this necessary?

There are two main reasons:

Byte Size: The hash array stores the message digest, which can have varying lengths depending on the algorithm (SHA-256 generates 32 bytes for a hash). However, we want each hash value to be represented as a human-readable string.
Hexadecimal Format: Hexadecimal is a more compact way to represent binary data compared to just using 8 bits (0s and 1s). Each hexadecimal digit represents 4 bits, reducing the overall string length.
Example:

Let's say a byte from the hash array has a binary value of 10101100.
Performing the bitwise AND with 0xff (11111111) results in 10101100.
Now, Integer.toHexString(10101100) would convert this byte value to the hexadecimal string "A4".


